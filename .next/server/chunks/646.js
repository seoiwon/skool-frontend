"use strict";exports.id=646,exports.ids=[646],exports.modules={2646:(e,t,a)=>{a.d(t,{WW:()=>checkPaymentStatus,kR:()=>requestPaymentLink});let requestPaymentLink=async e=>{try{let t=generateOrderId(e.courseId,e.userId),a=await fetch("/api/payment/payple/create-link",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({payType:"card",payWork:"PAYMENT",payGoods:e.courseName,payTotal:e.amount,payOid:t,payerName:e.customerName,payerEmail:e.customerEmail,payerHp:e.customerPhone||"",linkExpiredDate:getExpiredDate(),returnUrl:`${window.location.origin}/payment/success?orderId=${t}`,cancelUrl:`${window.location.origin}/payment/cancel?orderId=${t}`,webhookUrl:`${window.location.origin}/api/payment/payple/webhook`})}),r=await a.json();if(r.success&&r.paymentUrl)return{success:!0,paymentUrl:r.paymentUrl,paymentId:t,data:r};return{success:!1,message:r.message||"결제 링크 생성에 실패했습니다."}}catch(e){return console.error("결제 링크 생성 오류:",e),{success:!1,message:"결제 시스템 오류가 발생했습니다."}}},generateOrderId=(e,t)=>{let a=Date.now();return`ORDER_${e}_${t}_${a}`},getExpiredDate=()=>{let e=new Date;return e.setHours(e.getHours()+24),e.toISOString().slice(0,19).replace("T"," ")},checkPaymentStatus=async e=>{try{let t=await fetch(`/api/payment/payple/status?orderId=${e}`),a=await t.json();return a}catch(e){return console.error("결제 상태 확인 오류:",e),{success:!1,message:"결제 상태 확인 중 오류가 발생했습니다."}}}}};